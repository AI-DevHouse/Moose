/**
 * Project Template Generator
 * Generates .env templates and setup instructions for new projects
 */

export interface ProjectTemplateConfig {
  projectName: string;
  localPath: string;
  githubOrg?: string;
  supabaseUrl?: string;
  supabaseAnonKey?: string;
  vercelTeamId?: string;
}

/**
 * Generates a .env.local.template file for a new project
 */
export function generateEnvTemplate(config: ProjectTemplateConfig): string {
  const { supabaseUrl, supabaseAnonKey } = config;

  return `# Environment Variables for ${config.projectName}
# Copy this file to .env.local and fill in the values

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=${supabaseUrl || '<your-supabase-project-url>'}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${supabaseAnonKey || '<your-supabase-anon-key>'}
SUPABASE_SERVICE_ROLE_KEY=<your-supabase-service-role-key>

# Optional: Add other environment variables your project needs
# DATABASE_URL=
# API_KEY=
# etc.
`;
}

/**
 * Generates a .gitignore file for a new project
 */
export function generateGitignore(): string {
  return `.env.local
.env
.env*.local

# Dependencies
node_modules/
.pnp
.pnp.js

# Testing
coverage/

# Next.js
.next/
out/
build/
dist/

# Production
.vercel

# Misc
.DS_Store
*.pem

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# Local
.vscode/
.idea/
*.swp
*.swo
*~

# TypeScript
*.tsbuildinfo
next-env.d.ts
`;
}

/**
 * Generates setup instructions for a new project
 */
export function generateSetupInstructions(config: ProjectTemplateConfig): string {
  const { projectName, localPath, githubOrg } = config;

  return `# Setup Instructions for ${projectName}

## Project Created! ðŸŽ‰

Your project has been initialized at:
\`\`\`
${localPath}
\`\`\`

## Next Steps

### 1. Create GitHub Repository

Create a new repository for this project:

\`\`\`bash
# Option A: Using GitHub CLI (recommended)
gh repo create ${githubOrg || '<your-org>'}/${projectName} --private

# Option B: Via GitHub Web UI
# Go to: https://github.com/new
# Name: ${projectName}
# Owner: ${githubOrg || '<your-org>'}
# Visibility: Private (recommended)
\`\`\`

Then add the remote to your local repository:

\`\`\`bash
cd ${localPath}
git remote add origin https://github.com/${githubOrg || '<your-org>'}/${projectName}.git
git push -u origin main
\`\`\`

### 2. Create Supabase Project (Optional)

If your project needs a database:

1. Go to https://supabase.com/dashboard
2. Click "New Project"
3. Name: \`${projectName}-db\` (or similar)
4. Copy the following values:
   - Project URL (e.g., https://xxxxx.supabase.co)
   - Anon/Public key
   - Service role key (keep this secret!)

### 3. Configure Environment Variables

1. In your project directory, copy the template:
   \`\`\`bash
   cd ${localPath}
   cp .env.local.template .env.local
   \`\`\`

2. Edit \`.env.local\` and fill in your Supabase credentials:
   \`\`\`bash
   NEXT_PUBLIC_SUPABASE_URL=https://xxxxx.supabase.co
   NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJh...
   SUPABASE_SERVICE_ROLE_KEY=eyJh...
   \`\`\`

3. **IMPORTANT:** Never commit \`.env.local\` to git! (It's already in .gitignore)

### 4. Set Up Vercel (Optional)

If you want to deploy this project:

1. Install Vercel CLI:
   \`\`\`bash
   npm i -g vercel
   \`\`\`

2. Link your project:
   \`\`\`bash
   cd ${localPath}
   vercel link
   \`\`\`

3. Add environment variables to Vercel:
   \`\`\`bash
   vercel env add NEXT_PUBLIC_SUPABASE_URL
   vercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY
   vercel env add SUPABASE_SERVICE_ROLE_KEY
   \`\`\`

### 5. Return to Moose

Once you've completed the setup above, return to Moose Mission Control and you're ready to:
- Run decomposition for your project
- Execute work orders
- Deploy your application

## Checklist

- [ ] GitHub repository created
- [ ] Git remote added and pushed
- [ ] Supabase project created (if needed)
- [ ] .env.local configured with credentials
- [ ] Vercel project linked (if deploying)
- [ ] Ready to start building! ðŸš€

---

**Project Status:** Infrastructure setup pending

To update the project status in Moose, use:
\`\`\`bash
curl -X PATCH http://localhost:3000/api/projects/${projectName} \\
  -H "Content-Type: application/json" \\
  -d '{"infrastructure_status": "complete"}'
\`\`\`
`;
}

/**
 * Generates a README.md for the new project
 */
export function generateReadme(config: ProjectTemplateConfig): string {
  const { projectName } = config;

  return `# ${projectName}

> Generated by Moose Mission Control

## About

This project was created using Moose, an AI-powered development platform that decomposes specifications into executable work orders.

## Getting Started

See [SETUP_INSTRUCTIONS.md](./SETUP_INSTRUCTIONS.md) for initial setup steps.

## Development

\`\`\`bash
npm install
npm run dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) to view the application.

## Project Structure

\`\`\`
.
â”œâ”€â”€ src/          # Source code
â”œâ”€â”€ public/       # Static assets
â”œâ”€â”€ .env.local    # Environment variables (not committed)
â””â”€â”€ ...
\`\`\`

## Built With

- [Next.js](https://nextjs.org/)
- [TypeScript](https://www.typescriptlang.org/)
- [Supabase](https://supabase.com/) (if applicable)
- Moose Mission Control

---

Generated on ${new Date().toISOString().split('T')[0]}
`;
}
