// src/lib/orchestrator/__tests__/github-integration.test.ts
// Unit tests for github-integration - PR body generation

import { describe, it, expect } from 'vitest';

describe('GitHubIntegration - PR Body Generation', () => {
  it('should generate PR body with Work Order metadata', () => {
    const mockWorkOrder = {
      id: 'wo-abc123',
      title: 'Implement user authentication',
      description: 'Add JWT-based authentication to the API',
      acceptance_criteria: [
        'Users can log in with email/password',
        'JWT tokens expire after 24 hours',
        'Refresh token mechanism implemented'
      ],
      risk_level: 'medium'
    };

    const expectedPRBody = `
## Work Order: wo-abc123

**Title:** Implement user authentication

**Description:**
Add JWT-based authentication to the API

**Acceptance Criteria:**
- [ ] Users can log in with email/password
- [ ] JWT tokens expire after 24 hours
- [ ] Refresh token mechanism implemented

**Risk Level:** medium
    `.trim();

    expect(expectedPRBody).toContain('Work Order: wo-abc123');
    expect(expectedPRBody).toContain('Implement user authentication');
    expect(expectedPRBody).toContain('- [ ] Users can log in');
    expect(expectedPRBody).toContain('**Risk Level:** medium');
  });

  it('should include routing metadata in PR body', () => {
    const mockRoutingDecision = {
      proposer_id: 'claude-sonnet-proposer',
      proposer_name: 'Claude Sonnet 4.5',
      reason: 'High complexity with security requirements',
      routing_metadata: {
        complexity_score: 0.85,
        hard_stop_required: true,
        keywords_detected: ['authentication', 'JWT', 'security']
      }
    };

    const expectedMetadataSection = `
## Routing Metadata

**Model Used:** Claude Sonnet 4.5
**Complexity Score:** 0.85
**Hard Stop Required:** Yes
**Reason:** High complexity with security requirements
**Keywords Detected:** authentication, JWT, security
    `.trim();

    expect(expectedMetadataSection).toContain('Claude Sonnet 4.5');
    expect(expectedMetadataSection).toContain('**Complexity Score:** 0.85');
    expect(expectedMetadataSection).toContain('**Hard Stop Required:** Yes');
    expect(expectedMetadataSection).toContain('authentication, JWT, security');
  });

  it('should include cost and execution metrics in PR body', () => {
    const mockProposerResponse = {
      proposer_used: 'claude-sonnet-4-5',
      cost: 0.75,
      execution_time_ms: 4200,
      refinement_metadata: {
        refinement_count: 2,
        initial_errors: 5,
        final_errors: 0,
        refinement_success: true
      }
    };

    const expectedMetricsSection = `
## Execution Metrics

**Cost:** $0.75
**Execution Time:** 4.2s
**Refinement Cycles:** 2
**Initial Errors:** 5
**Final Errors:** 0
**Refinement Success:** ✅
    `.trim();

    expect(expectedMetricsSection).toContain('**Cost:** $0.75');
    expect(expectedMetricsSection).toContain('**Execution Time:** 4.2s');
    expect(expectedMetricsSection).toContain('**Refinement Cycles:** 2');
    expect(expectedMetricsSection).toContain('**Refinement Success:** ✅');
  });

  it('should format acceptance criteria as GitHub checkboxes', () => {
    const criteria = [
      'API returns 200 on success',
      'Error handling for invalid credentials',
      'Rate limiting prevents brute force'
    ];

    const formattedCriteria = criteria.map(c => `- [ ] ${c}`).join('\n');

    expect(formattedCriteria).toBe(
      '- [ ] API returns 200 on success\n' +
      '- [ ] Error handling for invalid credentials\n' +
      '- [ ] Rate limiting prevents brute force'
    );
  });

  it('should include Orchestrator tracking footer', () => {
    const expectedFooter = `
---

🤖 Generated by Moose Mission Control Orchestrator
Work Order ID: wo-abc123
Generated at: 2025-10-02T15:30:00Z
    `.trim();

    expect(expectedFooter).toContain('🤖 Generated by Moose Mission Control');
    expect(expectedFooter).toContain('Work Order ID:');
    expect(expectedFooter).toContain('Generated at:');
  });

  it('should generate PR title from Work Order title', () => {
    const testCases = [
      {
        woTitle: 'Implement user authentication',
        expected: '[WO-abc123] Implement user authentication'
      },
      {
        woTitle: 'Fix TypeScript compilation errors',
        expected: '[WO-def456] Fix TypeScript compilation errors'
      },
      {
        woTitle: 'Refactor database queries',
        expected: '[WO-ghi789] Refactor database queries'
      }
    ];

    testCases.forEach(({ woTitle, expected }) => {
      const woId = expected.match(/\[WO-([a-z0-9]+)\]/)?.[1];
      const prTitle = `[WO-${woId}] ${woTitle}`;

      expect(prTitle).toMatch(/^\[WO-[a-z0-9]+\] .+$/);
      expect(prTitle).toContain(woTitle);
    });
  });

  it('should handle Work Orders without refinement metadata', () => {
    const proposerResponseWithoutRefinement = {
      proposer_used: 'gpt-4o-mini',
      cost: 0.05,
      execution_time_ms: 1200
      // No refinement_metadata
    };

    const expectedMetrics = `
**Cost:** $0.05
**Execution Time:** 1.2s
**Refinement Cycles:** 0
    `.trim();

    expect(expectedMetrics).toContain('**Cost:** $0.05');
    expect(expectedMetrics).toContain('**Execution Time:** 1.2s');
    expect(expectedMetrics).toContain('**Refinement Cycles:** 0');
  });

  it('should format Hard Stop flag prominently when required', () => {
    const hardStopMetadata = {
      hard_stop_required: true,
      keywords_detected: ['authentication', 'password', 'security']
    };

    const expectedHardStopSection = `
⚠️ **HARD STOP TRIGGERED**
Security/Architecture keywords detected: authentication, password, security
Forced to use Claude Sonnet 4.5 for maximum reliability.
    `.trim();

    expect(expectedHardStopSection).toContain('⚠️ **HARD STOP TRIGGERED**');
    expect(expectedHardStopSection).toContain('authentication, password, security');
    expect(expectedHardStopSection).toContain('Claude Sonnet 4.5');
  });

  it('should generate valid GitHub CLI command for PR creation', () => {
    const mockWorkOrder = {
      id: 'wo-test',
      title: 'Test PR creation',
      branch: 'feature/wo-test-pr-creation'
    };

    const prTitle = `[WO-${mockWorkOrder.id}] ${mockWorkOrder.title}`;
    const prBody = 'Test PR body';

    // Expected gh CLI command
    const expectedCommand = [
      'gh', 'pr', 'create',
      '--base', 'main',
      '--head', mockWorkOrder.branch,
      '--title', prTitle,
      '--body', prBody
    ];

    expect(expectedCommand).toContain('gh');
    expect(expectedCommand).toContain('pr');
    expect(expectedCommand).toContain('create');
    expect(expectedCommand).toContain('--base');
    expect(expectedCommand).toContain('--head');
    expect(expectedCommand).toContain(mockWorkOrder.branch);
  });

  it('should parse PR URL from gh CLI output', () => {
    const ghCliOutput = `
Creating pull request for feature/wo-test-123 into main in AI-DevHouse/Moose

https://github.com/AI-DevHouse/Moose/pull/456
    `.trim();

    const prUrlMatch = ghCliOutput.match(/https:\/\/github\.com\/[^\/]+\/[^\/]+\/pull\/\d+/);
    const prUrl = prUrlMatch ? prUrlMatch[0] : null;

    expect(prUrl).toBe('https://github.com/AI-DevHouse/Moose/pull/456');
  });

  it('should extract PR number from GitHub URL', () => {
    const testUrls = [
      'https://github.com/AI-DevHouse/Moose/pull/123',
      'https://github.com/AI-DevHouse/Moose/pull/456',
      'https://github.com/AI-DevHouse/Moose/pull/789'
    ];

    testUrls.forEach(url => {
      const prNumberMatch = url.match(/\/pull\/(\d+)/);
      const prNumber = prNumberMatch ? parseInt(prNumberMatch[1], 10) : null;

      expect(prNumber).toBeGreaterThan(0);
      expect(prNumber).toBeLessThan(10000);
    });
  });
});
